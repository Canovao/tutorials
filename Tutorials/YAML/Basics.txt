What is YAML?
	YAML is a simple, human-readable data serialization format. It stands for "YAML Ain't Markup Language" because it emphasizes data readability and ease of use over complex markup. YAML uses indentation and plain text to represent data structures, making it popular for configuration files and data interchange between programming languages.

YAML Syntax Basics:
    YAML uses indentation to represent hierarchical structure, similar to Python.
    YAML documents start with --- at the beginning and end with ... or ---.
    Key-value pairs are represented using a colon (:) or an equal sign (=).
    Lists or arrays are represented using a hyphen (-) followed by a space.
    Comments start with a # symbol and are ignored by parsers.
    
Here's an example YAML document that demonstrates these basic syntax elements:
    # This is a YAML document
    ---
    name: John Doe
    age: 30
    languages:
        - English
        - French
        - Spanish
    address:
    street: 123 Main St
    city: Anytown
    country: USA
    ...

Alternative example:
    name: John Doe
    age: 31
    languages: [English, Spanish, German]
    address: {street: 123 Main St, city: Anytown, country: USA}


Scalar Data Types:
    YAML supports several scalar data types:
    Strings: Enclosed in single or double quotes.
    Numbers: Integer and floating-point values.
    Booleans: true or false.
    Null: Represented by null.

Example:
    ---
    name: 'John Doe'
    age: 30
    height: 1.75
    isStudent: true
    favoriteColor: null
    ...

Lists/Arrays, ordered sequences of items, represented using the hyphen (-):
    fruits:
        - apple
        - banana
        - orange

Dictionaries/Maps, unordered collections of key-value pairs:
    person:
        name: John Doe
        age: 30

YAML supports nested structures by using indentation:
    person:
        name: John Doe
        address:
            street: 123 Main St
            city: Anytown
            country: USA

YAML allows referencing the same data multiple times using anchors and aliases:
    defaults: &defaults
        username: guest
        password: guest

    user1: *defaults
    user2:
        <<: *defaults
        username: admin

